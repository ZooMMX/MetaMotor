// This file was generated automatically by the Snowball to Java compiler

package snowball;



 /**
  * This class was automatically generated by a Snowball to Java compiler 
  * It implements the stemming algorithm defined by a snowball script.
  */

public class MySpaStemmer extends SnowballStemmer {

private static final long serialVersionUID = 1L;

        private final static MySpaStemmer methodObject = new MySpaStemmer();

                private final static Among a_0[] = {
                    new Among ( "", -1, 6, "", methodObject ),
                    new Among ( "\u00E1", 0, 1, "", methodObject ),
                    new Among ( "\u00E9", 0, 2, "", methodObject ),
                    new Among ( "\u00ED", 0, 3, "", methodObject ),
                    new Among ( "\u00F3", 0, 4, "", methodObject ),
                    new Among ( "\u00FA", 0, 5, "", methodObject )
                };

                private final static Among a_1[] = {
                    new Among ( "andes", -1, -1, "", methodObject ),
                    new Among ( "atlas", -1, -1, "", methodObject ),
                    new Among ( "bias", -1, -1, "", methodObject ),
                    new Among ( "caer", -1, -1, "", methodObject ),
                    new Among ( "cayendo", -1, 9, "", methodObject ),
                    new Among ( "cay\u00F3", -1, 8, "", methodObject ),
                    new Among ( "cosmos", -1, -1, "", methodObject ),
                    new Among ( "creer", -1, -1, "", methodObject ),
                    new Among ( "crey\u00F3", -1, 10, "", methodObject ),
                    new Among ( "estar", -1, -1, "", methodObject ),
                    new Among ( "estar\u00EDa", 9, 7, "", methodObject ),
                    new Among ( "llegar", -1, -1, "", methodObject ),
                    new Among ( "llegu\u00E9", -1, 4, "", methodObject ),
                    new Among ( "recoger", -1, -1, "", methodObject ),
                    new Among ( "recojo", -1, 5, "", methodObject ),
                    new Among ( "roer", -1, -1, "", methodObject ),
                    new Among ( "royendo", -1, 11, "", methodObject ),
                    new Among ( "ser", -1, -1, "", methodObject ),
                    new Among ( "ser\u00EDa", 17, 6, "", methodObject ),
                    new Among ( "sky", -1, -1, "", methodObject ),
                    new Among ( "tocar", -1, -1, "", methodObject ),
                    new Among ( "toqu\u00E9", -1, 2, "", methodObject ),
                    new Among ( "vencer", -1, -1, "", methodObject ),
                    new Among ( "venzo", -1, 3, "", methodObject ),
                    new Among ( "zurzir", -1, -1, "", methodObject ),
                    new Among ( "zurzo", -1, 1, "", methodObject )
                };

                private final static Among a_2[] = {
                    new Among ( "a", -1, 1, "", methodObject ),
                    new Among ( "la", 0, 1, "", methodObject ),
                    new Among ( "ella", 1, 1, "", methodObject ),
                    new Among ( "una", 0, 1, "", methodObject ),
                    new Among ( "para", 0, 1, "", methodObject ),
                    new Among ( "contra", 0, 1, "", methodObject ),
                    new Among ( "otra", 0, 1, "", methodObject ),
                    new Among ( "esa", 0, 1, "", methodObject ),
                    new Among ( "hasta", 0, 1, "", methodObject ),
                    new Among ( "esta", 0, 1, "", methodObject ),
                    new Among ( "ya", 0, 1, "", methodObject ),
                    new Among ( "e", -1, 1, "", methodObject ),
                    new Among ( "de", 11, 1, "", methodObject ),
                    new Among ( "donde", 12, 1, "", methodObject ),
                    new Among ( "desde", 12, 1, "", methodObject ),
                    new Among ( "le", 11, 1, "", methodObject ),
                    new Among ( "me", 11, 1, "", methodObject ),
                    new Among ( "sobre", 11, 1, "", methodObject ),
                    new Among ( "entre", 11, 1, "", methodObject ),
                    new Among ( "se", 11, 1, "", methodObject ),
                    new Among ( "ese", 19, 1, "", methodObject ),
                    new Among ( "ante", 11, 1, "", methodObject ),
                    new Among ( "este", 11, 1, "", methodObject ),
                    new Among ( "porque", 11, 1, "", methodObject ),
                    new Among ( "ni", -1, 1, "", methodObject ),
                    new Among ( "al", -1, 1, "", methodObject ),
                    new Among ( "cual", 25, 1, "", methodObject ),
                    new Among ( "el", -1, 1, "", methodObject ),
                    new Among ( "del", 27, 1, "", methodObject ),
                    new Among ( "\u00E9l", -1, 1, "", methodObject ),
                    new Among ( "en", -1, 1, "", methodObject ),
                    new Among ( "quien", 30, 1, "", methodObject ),
                    new Among ( "sin", -1, 1, "", methodObject ),
                    new Among ( "con", -1, 1, "", methodObject ),
                    new Among ( "un", -1, 1, "", methodObject ),
                    new Among ( "tambi\u00E9n", -1, 1, "", methodObject ),
                    new Among ( "o", -1, 1, "", methodObject ),
                    new Among ( "poco", 36, 1, "", methodObject ),
                    new Among ( "cuando", 36, 1, "", methodObject ),
                    new Among ( "algo", 36, 1, "", methodObject ),
                    new Among ( "mucho", 36, 1, "", methodObject ),
                    new Among ( "lo", 36, 1, "", methodObject ),
                    new Among ( "como", 36, 1, "", methodObject ),
                    new Among ( "no", 36, 1, "", methodObject ),
                    new Among ( "uno", 43, 1, "", methodObject ),
                    new Among ( "pero", 36, 1, "", methodObject ),
                    new Among ( "otro", 36, 1, "", methodObject ),
                    new Among ( "eso", 36, 1, "", methodObject ),
                    new Among ( "tanto", 36, 1, "", methodObject ),
                    new Among ( "esto", 36, 1, "", methodObject ),
                    new Among ( "yo", 36, 1, "", methodObject ),
                    new Among ( "estar", -1, 1, "", methodObject ),
                    new Among ( "por", -1, 1, "", methodObject ),
                    new Among ( "las", -1, 1, "", methodObject ),
                    new Among ( "algunas", -1, 1, "", methodObject ),
                    new Among ( "otras", -1, 1, "", methodObject ),
                    new Among ( "estas", -1, 1, "", methodObject ),
                    new Among ( "les", -1, 1, "", methodObject ),
                    new Among ( "antes", -1, 1, "", methodObject ),
                    new Among ( "todos", -1, 1, "", methodObject ),
                    new Among ( "los", -1, 1, "", methodObject ),
                    new Among ( "ellos", 60, 1, "", methodObject ),
                    new Among ( "unos", -1, 1, "", methodObject ),
                    new Among ( "algunos", 62, 1, "", methodObject ),
                    new Among ( "otros", -1, 1, "", methodObject ),
                    new Among ( "nosotros", 64, 1, "", methodObject ),
                    new Among ( "estos", -1, 1, "", methodObject ),
                    new Among ( "sus", -1, 1, "", methodObject ),
                    new Among ( "m\u00E1s", -1, 1, "", methodObject ),
                    new Among ( "su", -1, 1, "", methodObject ),
                    new Among ( "y", -1, 1, "", methodObject ),
                    new Among ( "hay", 70, 1, "", methodObject ),
                    new Among ( "muy", 70, 1, "", methodObject ),
                    new Among ( "qu\u00E9", -1, 1, "", methodObject ),
                    new Among ( "m\u00ED", -1, 1, "", methodObject ),
                    new Among ( "s\u00ED", -1, 1, "", methodObject )
                };

                private final static Among a_3[] = {
                    new Among ( "la", -1, -1, "", methodObject ),
                    new Among ( "sela", 0, -1, "", methodObject ),
                    new Among ( "le", -1, -1, "", methodObject ),
                    new Among ( "me", -1, -1, "", methodObject ),
                    new Among ( "se", -1, -1, "", methodObject ),
                    new Among ( "lo", -1, -1, "", methodObject ),
                    new Among ( "selo", 5, -1, "", methodObject ),
                    new Among ( "las", -1, -1, "", methodObject ),
                    new Among ( "selas", 7, -1, "", methodObject ),
                    new Among ( "les", -1, -1, "", methodObject ),
                    new Among ( "los", -1, -1, "", methodObject ),
                    new Among ( "selos", 10, -1, "", methodObject ),
                    new Among ( "nos", -1, -1, "", methodObject )
                };

                private final static Among a_4[] = {
                    new Among ( "ando", -1, 6, "", methodObject ),
                    new Among ( "iendo", -1, 6, "", methodObject ),
                    new Among ( "yendo", -1, 7, "", methodObject ),
                    new Among ( "\u00E1ndo", -1, 2, "", methodObject ),
                    new Among ( "i\u00E9ndo", -1, 1, "", methodObject ),
                    new Among ( "ar", -1, 6, "", methodObject ),
                    new Among ( "er", -1, 6, "", methodObject ),
                    new Among ( "ir", -1, 6, "", methodObject ),
                    new Among ( "\u00E1r", -1, 3, "", methodObject ),
                    new Among ( "\u00E9r", -1, 4, "", methodObject ),
                    new Among ( "\u00EDr", -1, 5, "", methodObject )
                };

                private final static Among a_5[] = {
                    new Among ( "ic", -1, -1, "", methodObject ),
                    new Among ( "ad", -1, -1, "", methodObject ),
                    new Among ( "os", -1, -1, "", methodObject ),
                    new Among ( "iv", -1, 1, "", methodObject )
                };

                private final static Among a_6[] = {
                    new Among ( "able", -1, 1, "", methodObject ),
                    new Among ( "ible", -1, 1, "", methodObject ),
                    new Among ( "ante", -1, 1, "", methodObject )
                };

                private final static Among a_7[] = {
                    new Among ( "ic", -1, 1, "", methodObject ),
                    new Among ( "abil", -1, 1, "", methodObject ),
                    new Among ( "iv", -1, 1, "", methodObject )
                };

                private final static Among a_8[] = {
                    new Among ( "ica", -1, 1, "", methodObject ),
                    new Among ( "ancia", -1, 2, "", methodObject ),
                    new Among ( "encia", -1, 5, "", methodObject ),
                    new Among ( "adora", -1, 2, "", methodObject ),
                    new Among ( "osa", -1, 1, "", methodObject ),
                    new Among ( "ista", -1, 1, "", methodObject ),
                    new Among ( "iva", -1, 9, "", methodObject ),
                    new Among ( "anza", -1, 1, "", methodObject ),
                    new Among ( "log\u00EDa", -1, 3, "", methodObject ),
                    new Among ( "idad", -1, 8, "", methodObject ),
                    new Among ( "able", -1, 1, "", methodObject ),
                    new Among ( "ible", -1, 1, "", methodObject ),
                    new Among ( "ante", -1, 2, "", methodObject ),
                    new Among ( "mente", -1, 7, "", methodObject ),
                    new Among ( "amente", 13, 6, "", methodObject ),
                    new Among ( "aci\u00F3n", -1, 2, "", methodObject ),
                    new Among ( "uci\u00F3n", -1, 4, "", methodObject ),
                    new Among ( "ico", -1, 1, "", methodObject ),
                    new Among ( "ismo", -1, 1, "", methodObject ),
                    new Among ( "oso", -1, 1, "", methodObject ),
                    new Among ( "amiento", -1, 1, "", methodObject ),
                    new Among ( "imiento", -1, 1, "", methodObject ),
                    new Among ( "ivo", -1, 9, "", methodObject ),
                    new Among ( "ador", -1, 2, "", methodObject ),
                    new Among ( "icas", -1, 1, "", methodObject ),
                    new Among ( "ancias", -1, 2, "", methodObject ),
                    new Among ( "encias", -1, 5, "", methodObject ),
                    new Among ( "adoras", -1, 2, "", methodObject ),
                    new Among ( "osas", -1, 1, "", methodObject ),
                    new Among ( "istas", -1, 1, "", methodObject ),
                    new Among ( "ivas", -1, 9, "", methodObject ),
                    new Among ( "anzas", -1, 1, "", methodObject ),
                    new Among ( "log\u00EDas", -1, 3, "", methodObject ),
                    new Among ( "idades", -1, 8, "", methodObject ),
                    new Among ( "ables", -1, 1, "", methodObject ),
                    new Among ( "ibles", -1, 1, "", methodObject ),
                    new Among ( "aciones", -1, 2, "", methodObject ),
                    new Among ( "uciones", -1, 4, "", methodObject ),
                    new Among ( "adores", -1, 2, "", methodObject ),
                    new Among ( "antes", -1, 2, "", methodObject ),
                    new Among ( "icos", -1, 1, "", methodObject ),
                    new Among ( "ismos", -1, 1, "", methodObject ),
                    new Among ( "osos", -1, 1, "", methodObject ),
                    new Among ( "amientos", -1, 1, "", methodObject ),
                    new Among ( "imientos", -1, 1, "", methodObject ),
                    new Among ( "ivos", -1, 9, "", methodObject )
                };

                private final static Among a_9[] = {
                    new Among ( "ya", -1, 1, "", methodObject ),
                    new Among ( "ye", -1, 1, "", methodObject ),
                    new Among ( "yan", -1, 1, "", methodObject ),
                    new Among ( "yen", -1, 1, "", methodObject ),
                    new Among ( "yeron", -1, 1, "", methodObject ),
                    new Among ( "yendo", -1, 1, "", methodObject ),
                    new Among ( "yo", -1, 1, "", methodObject ),
                    new Among ( "yas", -1, 1, "", methodObject ),
                    new Among ( "yes", -1, 1, "", methodObject ),
                    new Among ( "yais", -1, 1, "", methodObject ),
                    new Among ( "yamos", -1, 1, "", methodObject ),
                    new Among ( "y\u00F3", -1, 1, "", methodObject )
                };

                private final static Among a_10[] = {
                    new Among ( "aba", -1, 2, "", methodObject ),
                    new Among ( "ada", -1, 2, "", methodObject ),
                    new Among ( "ida", -1, 2, "", methodObject ),
                    new Among ( "ara", -1, 2, "", methodObject ),
                    new Among ( "iera", -1, 2, "", methodObject ),
                    new Among ( "\u00EDa", -1, 2, "", methodObject ),
                    new Among ( "ar\u00EDa", 5, 2, "", methodObject ),
                    new Among ( "er\u00EDa", 5, 2, "", methodObject ),
                    new Among ( "ir\u00EDa", 5, 2, "", methodObject ),
                    new Among ( "ad", -1, 2, "", methodObject ),
                    new Among ( "ed", -1, 2, "", methodObject ),
                    new Among ( "id", -1, 2, "", methodObject ),
                    new Among ( "ase", -1, 2, "", methodObject ),
                    new Among ( "iese", -1, 2, "", methodObject ),
                    new Among ( "aste", -1, 2, "", methodObject ),
                    new Among ( "iste", -1, 2, "", methodObject ),
                    new Among ( "an", -1, 2, "", methodObject ),
                    new Among ( "aban", 16, 2, "", methodObject ),
                    new Among ( "aran", 16, 2, "", methodObject ),
                    new Among ( "ieran", 16, 2, "", methodObject ),
                    new Among ( "\u00EDan", 16, 2, "", methodObject ),
                    new Among ( "ar\u00EDan", 20, 2, "", methodObject ),
                    new Among ( "er\u00EDan", 20, 2, "", methodObject ),
                    new Among ( "ir\u00EDan", 20, 2, "", methodObject ),
                    new Among ( "en", -1, 1, "", methodObject ),
                    new Among ( "asen", 24, 2, "", methodObject ),
                    new Among ( "iesen", 24, 2, "", methodObject ),
                    new Among ( "aron", -1, 2, "", methodObject ),
                    new Among ( "ieron", -1, 2, "", methodObject ),
                    new Among ( "ar\u00E1n", -1, 2, "", methodObject ),
                    new Among ( "er\u00E1n", -1, 2, "", methodObject ),
                    new Among ( "ir\u00E1n", -1, 2, "", methodObject ),
                    new Among ( "ado", -1, 2, "", methodObject ),
                    new Among ( "ido", -1, 2, "", methodObject ),
                    new Among ( "ando", -1, 2, "", methodObject ),
                    new Among ( "iendo", -1, 2, "", methodObject ),
                    new Among ( "ar", -1, 2, "", methodObject ),
                    new Among ( "er", -1, 2, "", methodObject ),
                    new Among ( "ir", -1, 2, "", methodObject ),
                    new Among ( "as", -1, 2, "", methodObject ),
                    new Among ( "abas", 39, 2, "", methodObject ),
                    new Among ( "adas", 39, 2, "", methodObject ),
                    new Among ( "idas", 39, 2, "", methodObject ),
                    new Among ( "aras", 39, 2, "", methodObject ),
                    new Among ( "ieras", 39, 2, "", methodObject ),
                    new Among ( "\u00EDas", 39, 2, "", methodObject ),
                    new Among ( "ar\u00EDas", 45, 2, "", methodObject ),
                    new Among ( "er\u00EDas", 45, 2, "", methodObject ),
                    new Among ( "ir\u00EDas", 45, 2, "", methodObject ),
                    new Among ( "es", -1, 1, "", methodObject ),
                    new Among ( "ases", 49, 2, "", methodObject ),
                    new Among ( "ieses", 49, 2, "", methodObject ),
                    new Among ( "abais", -1, 2, "", methodObject ),
                    new Among ( "arais", -1, 2, "", methodObject ),
                    new Among ( "ierais", -1, 2, "", methodObject ),
                    new Among ( "\u00EDais", -1, 2, "", methodObject ),
                    new Among ( "ar\u00EDais", 55, 2, "", methodObject ),
                    new Among ( "er\u00EDais", 55, 2, "", methodObject ),
                    new Among ( "ir\u00EDais", 55, 2, "", methodObject ),
                    new Among ( "aseis", -1, 2, "", methodObject ),
                    new Among ( "ieseis", -1, 2, "", methodObject ),
                    new Among ( "asteis", -1, 2, "", methodObject ),
                    new Among ( "isteis", -1, 2, "", methodObject ),
                    new Among ( "\u00E1is", -1, 2, "", methodObject ),
                    new Among ( "\u00E9is", -1, 1, "", methodObject ),
                    new Among ( "ar\u00E9is", 64, 2, "", methodObject ),
                    new Among ( "er\u00E9is", 64, 2, "", methodObject ),
                    new Among ( "ir\u00E9is", 64, 2, "", methodObject ),
                    new Among ( "ados", -1, 2, "", methodObject ),
                    new Among ( "idos", -1, 2, "", methodObject ),
                    new Among ( "amos", -1, 2, "", methodObject ),
                    new Among ( "\u00E1bamos", 70, 2, "", methodObject ),
                    new Among ( "\u00E1ramos", 70, 2, "", methodObject ),
                    new Among ( "i\u00E9ramos", 70, 2, "", methodObject ),
                    new Among ( "\u00EDamos", 70, 2, "", methodObject ),
                    new Among ( "ar\u00EDamos", 74, 2, "", methodObject ),
                    new Among ( "er\u00EDamos", 74, 2, "", methodObject ),
                    new Among ( "ir\u00EDamos", 74, 2, "", methodObject ),
                    new Among ( "emos", -1, 1, "", methodObject ),
                    new Among ( "aremos", 78, 2, "", methodObject ),
                    new Among ( "eremos", 78, 2, "", methodObject ),
                    new Among ( "iremos", 78, 2, "", methodObject ),
                    new Among ( "\u00E1semos", 78, 2, "", methodObject ),
                    new Among ( "i\u00E9semos", 78, 2, "", methodObject ),
                    new Among ( "imos", -1, 2, "", methodObject ),
                    new Among ( "ar\u00E1s", -1, 2, "", methodObject ),
                    new Among ( "er\u00E1s", -1, 2, "", methodObject ),
                    new Among ( "ir\u00E1s", -1, 2, "", methodObject ),
                    new Among ( "\u00EDs", -1, 2, "", methodObject ),
                    new Among ( "ar\u00E1", -1, 2, "", methodObject ),
                    new Among ( "er\u00E1", -1, 2, "", methodObject ),
                    new Among ( "ir\u00E1", -1, 2, "", methodObject ),
                    new Among ( "ar\u00E9", -1, 2, "", methodObject ),
                    new Among ( "er\u00E9", -1, 2, "", methodObject ),
                    new Among ( "ir\u00E9", -1, 2, "", methodObject ),
                    new Among ( "i\u00F3", -1, 2, "", methodObject )
                };

                private final static Among a_11[] = {
                    new Among ( "a", -1, 1, "", methodObject ),
                    new Among ( "e", -1, 2, "", methodObject ),
                    new Among ( "o", -1, 1, "", methodObject ),
                    new Among ( "os", -1, 1, "", methodObject ),
                    new Among ( "\u00E1", -1, 1, "", methodObject ),
                    new Among ( "\u00E9", -1, 2, "", methodObject ),
                    new Among ( "\u00ED", -1, 1, "", methodObject ),
                    new Among ( "\u00F3", -1, 1, "", methodObject )
                };

                private static final char g_v[] = {17, 65, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 17, 4, 10 };

        private int I_p2;
        private int I_p1;
        private int I_pV;

                private void copy_from(MySpaStemmer other) {
                    I_p2 = other.I_p2;
                    I_p1 = other.I_p1;
                    I_pV = other.I_pV;
                    super.copy_from(other);
                }

                private boolean r_mark_regions() {
            int v_1;
            int v_2;
            int v_3;
            int v_6;
            int v_8;
                    // (, line 34
                    I_pV = limit;
                    I_p1 = limit;
                    I_p2 = limit;
                    // do, line 40
                    v_1 = cursor;
                    lab0: do {
                        // (, line 40
                        // or, line 42
                        lab1: do {
                            v_2 = cursor;
                            lab2: do {
                                // (, line 41
                                if (!(in_grouping(g_v, 97, 252)))
                                {
                                    break lab2;
                                }
                                // or, line 41
                                lab3: do {
                                    v_3 = cursor;
                                    lab4: do {
                                        // (, line 41
                                        if (!(out_grouping(g_v, 97, 252)))
                                        {
                                            break lab4;
                                        }
                                        // gopast, line 41
                                        golab5: while(true)
                                        {
                                            lab6: do {
                                                if (!(in_grouping(g_v, 97, 252)))
                                                {
                                                    break lab6;
                                                }
                                                break golab5;
                                            } while (false);
                                            if (cursor >= limit)
                                            {
                                                break lab4;
                                            }
                                            cursor++;
                                        }
                                        break lab3;
                                    } while (false);
                                    cursor = v_3;
                                    // (, line 41
                                    if (!(in_grouping(g_v, 97, 252)))
                                    {
                                        break lab2;
                                    }
                                    // gopast, line 41
                                    golab7: while(true)
                                    {
                                        lab8: do {
                                            if (!(out_grouping(g_v, 97, 252)))
                                            {
                                                break lab8;
                                            }
                                            break golab7;
                                        } while (false);
                                        if (cursor >= limit)
                                        {
                                            break lab2;
                                        }
                                        cursor++;
                                    }
                                } while (false);
                                break lab1;
                            } while (false);
                            cursor = v_2;
                            // (, line 43
                            if (!(out_grouping(g_v, 97, 252)))
                            {
                                break lab0;
                            }
                            // or, line 43
                            lab9: do {
                                v_6 = cursor;
                                lab10: do {
                                    // (, line 43
                                    if (!(out_grouping(g_v, 97, 252)))
                                    {
                                        break lab10;
                                    }
                                    // gopast, line 43
                                    golab11: while(true)
                                    {
                                        lab12: do {
                                            if (!(in_grouping(g_v, 97, 252)))
                                            {
                                                break lab12;
                                            }
                                            break golab11;
                                        } while (false);
                                        if (cursor >= limit)
                                        {
                                            break lab10;
                                        }
                                        cursor++;
                                    }
                                    break lab9;
                                } while (false);
                                cursor = v_6;
                                // (, line 43
                                if (!(in_grouping(g_v, 97, 252)))
                                {
                                    break lab0;
                                }
                                // next, line 43
                                if (cursor >= limit)
                                {
                                    break lab0;
                                }
                                cursor++;
                            } while (false);
                        } while (false);
                        // setmark pV, line 44
                        I_pV = cursor;
                    } while (false);
                    cursor = v_1;
                    // do, line 46
                    v_8 = cursor;
                    lab13: do {
                        // (, line 46
                        // gopast, line 47
                        golab14: while(true)
                        {
                            lab15: do {
                                if (!(in_grouping(g_v, 97, 252)))
                                {
                                    break lab15;
                                }
                                break golab14;
                            } while (false);
                            if (cursor >= limit)
                            {
                                break lab13;
                            }
                            cursor++;
                        }
                        // gopast, line 47
                        golab16: while(true)
                        {
                            lab17: do {
                                if (!(out_grouping(g_v, 97, 252)))
                                {
                                    break lab17;
                                }
                                break golab16;
                            } while (false);
                            if (cursor >= limit)
                            {
                                break lab13;
                            }
                            cursor++;
                        }
                        // setmark p1, line 47
                        I_p1 = cursor;
                        // gopast, line 48
                        golab18: while(true)
                        {
                            lab19: do {
                                if (!(in_grouping(g_v, 97, 252)))
                                {
                                    break lab19;
                                }
                                break golab18;
                            } while (false);
                            if (cursor >= limit)
                            {
                                break lab13;
                            }
                            cursor++;
                        }
                        // gopast, line 48
                        golab20: while(true)
                        {
                            lab21: do {
                                if (!(out_grouping(g_v, 97, 252)))
                                {
                                    break lab21;
                                }
                                break golab20;
                            } while (false);
                            if (cursor >= limit)
                            {
                                break lab13;
                            }
                            cursor++;
                        }
                        // setmark p2, line 48
                        I_p2 = cursor;
                    } while (false);
                    cursor = v_8;
                    return true;
                }

                private boolean r_postlude() {
            int among_var;
            int v_1;
                    // repeat, line 52
                    replab0: while(true)
                    {
                        v_1 = cursor;
                        lab1: do {
                            // (, line 52
                            // [, line 53
                            bra = cursor;
                            // substring, line 53
                            among_var = find_among(a_0, 6);
                            if (among_var == 0)
                            {
                                break lab1;
                            }
                            // ], line 53
                            ket = cursor;
                            switch(among_var) {
                                case 0:
                                    break lab1;
                                case 1:
                                    // (, line 54
                                    // <-, line 54
                                    slice_from("a");
                                    break;
                                case 2:
                                    // (, line 55
                                    // <-, line 55
                                    slice_from("e");
                                    break;
                                case 3:
                                    // (, line 56
                                    // <-, line 56
                                    slice_from("i");
                                    break;
                                case 4:
                                    // (, line 57
                                    // <-, line 57
                                    slice_from("o");
                                    break;
                                case 5:
                                    // (, line 58
                                    // <-, line 58
                                    slice_from("u");
                                    break;
                                case 6:
                                    // (, line 60
                                    // next, line 60
                                    if (cursor >= limit)
                                    {
                                        break lab1;
                                    }
                                    cursor++;
                                    break;
                            }
                            continue replab0;
                        } while (false);
                        cursor = v_1;
                        break replab0;
                    }
                    return true;
                }

                private boolean r_exception1() {
            int among_var;
                    // (, line 64
                    // [, line 66
                    bra = cursor;
                    // substring, line 66
                    among_var = find_among(a_1, 26);
                    if (among_var == 0)
                    {
                        return false;
                    }
                    // ], line 66
                    ket = cursor;
                    // atlimit, line 66
                    if (cursor < limit)
                    {
                        return false;
                    }
                    switch(among_var) {
                        case 0:
                            return false;
                        case 1:
                            // (, line 70
                            // <-, line 70
                            slice_from("zurcir");
                            break;
                        case 2:
                            // (, line 71
                            // <-, line 71
                            slice_from("tocar");
                            break;
                        case 3:
                            // (, line 72
                            // <-, line 72
                            slice_from("vencer");
                            break;
                        case 4:
                            // (, line 73
                            // <-, line 73
                            slice_from("llegar");
                            break;
                        case 5:
                            // (, line 74
                            // <-, line 74
                            slice_from("recoger");
                            break;
                        case 6:
                            // (, line 75
                            // <-, line 75
                            slice_from("ser");
                            break;
                        case 7:
                            // (, line 76
                            // <-, line 76
                            slice_from("estar");
                            break;
                        case 8:
                            // (, line 82
                            // <-, line 82
                            slice_from("caer");
                            break;
                        case 9:
                            // (, line 83
                            // <-, line 83
                            slice_from("caer");
                            break;
                        case 10:
                            // (, line 84
                            // <-, line 84
                            slice_from("creer");
                            break;
                        case 11:
                            // (, line 85
                            // <-, line 85
                            slice_from("roer");
                            break;
                    }
                    return true;
                }

                private boolean r_RV() {
                    if (!(I_pV <= cursor))
                    {
                        return false;
                    }
                    return true;
                }

                private boolean r_R1() {
                    if (!(I_p1 <= cursor))
                    {
                        return false;
                    }
                    return true;
                }

                private boolean r_R2() {
                    if (!(I_p2 <= cursor))
                    {
                        return false;
                    }
                    return true;
                }

                private boolean r_stopwords() {
            int among_var;
                    // (, line 119
                    // [, line 120
                    ket = cursor;
                    // substring, line 120
                    among_var = find_among_b(a_2, 76);
                    if (among_var == 0)
                    {
                        return false;
                    }
                    // ], line 120
                    bra = cursor;
                    // atlimit, line 120
                    if (cursor > limit_backward)
                    {
                        return false;
                    }
                    switch(among_var) {
                        case 0:
                            return false;
                        case 1:
                            // (, line 130
                            // delete, line 131
                            slice_del();
                            break;
                    }
                    return true;
                }

                private boolean r_attached_pronoun() {
            int among_var;
                    // (, line 135
                    // [, line 136
                    ket = cursor;
                    // substring, line 136
                    if (find_among_b(a_3, 13) == 0)
                    {
                        return false;
                    }
                    // ], line 136
                    bra = cursor;
                    // substring, line 140
                    among_var = find_among_b(a_4, 11);
                    if (among_var == 0)
                    {
                        return false;
                    }
                    // call RV, line 140
                    if (!r_RV())
                    {
                        return false;
                    }
                    switch(among_var) {
                        case 0:
                            return false;
                        case 1:
                            // (, line 141
                            // ], line 141
                            bra = cursor;
                            // <-, line 141
                            slice_from("iendo");
                            break;
                        case 2:
                            // (, line 142
                            // ], line 142
                            bra = cursor;
                            // <-, line 142
                            slice_from("ando");
                            break;
                        case 3:
                            // (, line 143
                            // ], line 143
                            bra = cursor;
                            // <-, line 143
                            slice_from("ar");
                            break;
                        case 4:
                            // (, line 144
                            // ], line 144
                            bra = cursor;
                            // <-, line 144
                            slice_from("er");
                            break;
                        case 5:
                            // (, line 145
                            // ], line 145
                            bra = cursor;
                            // <-, line 145
                            slice_from("ir");
                            break;
                        case 6:
                            // (, line 149
                            // delete, line 149
                            slice_del();
                            break;
                        case 7:
                            // (, line 150
                            // literal, line 150
                            if (!(eq_s_b(1, "u")))
                            {
                                return false;
                            }
                            // delete, line 150
                            slice_del();
                            break;
                    }
                    return true;
                }

                private boolean r_standard_suffix() {
            int among_var;
            int v_1;
            int v_2;
            int v_3;
            int v_4;
            int v_5;
                    // (, line 155
                    // [, line 156
                    ket = cursor;
                    // substring, line 156
                    among_var = find_among_b(a_8, 46);
                    if (among_var == 0)
                    {
                        return false;
                    }
                    // ], line 156
                    bra = cursor;
                    switch(among_var) {
                        case 0:
                            return false;
                        case 1:
                            // (, line 167
                            // call R2, line 168
                            if (!r_R2())
                            {
                                return false;
                            }
                            // delete, line 168
                            slice_del();
                            break;
                        case 2:
                            // (, line 173
                            // call R2, line 174
                            if (!r_R2())
                            {
                                return false;
                            }
                            // delete, line 174
                            slice_del();
                            // try, line 175
                            v_1 = limit - cursor;
                            lab0: do {
                                // (, line 175
                                // [, line 175
                                ket = cursor;
                                // literal, line 175
                                if (!(eq_s_b(2, "ic")))
                                {
                                    cursor = limit - v_1;
                                    break lab0;
                                }
                                // ], line 175
                                bra = cursor;
                                // call R2, line 175
                                if (!r_R2())
                                {
                                    cursor = limit - v_1;
                                    break lab0;
                                }
                                // delete, line 175
                                slice_del();
                            } while (false);
                            break;
                        case 3:
                            // (, line 179
                            // call R2, line 180
                            if (!r_R2())
                            {
                                return false;
                            }
                            // <-, line 180
                            slice_from("log");
                            break;
                        case 4:
                            // (, line 183
                            // call R2, line 184
                            if (!r_R2())
                            {
                                return false;
                            }
                            // <-, line 184
                            slice_from("u");
                            break;
                        case 5:
                            // (, line 187
                            // call R2, line 188
                            if (!r_R2())
                            {
                                return false;
                            }
                            // <-, line 188
                            slice_from("ente");
                            break;
                        case 6:
                            // (, line 191
                            // call R1, line 192
                            if (!r_R1())
                            {
                                return false;
                            }
                            // delete, line 192
                            slice_del();
                            // try, line 193
                            v_2 = limit - cursor;
                            lab1: do {
                                // (, line 193
                                // [, line 194
                                ket = cursor;
                                // substring, line 194
                                among_var = find_among_b(a_5, 4);
                                if (among_var == 0)
                                {
                                    cursor = limit - v_2;
                                    break lab1;
                                }
                                // ], line 194
                                bra = cursor;
                                // call R2, line 194
                                if (!r_R2())
                                {
                                    cursor = limit - v_2;
                                    break lab1;
                                }
                                // delete, line 194
                                slice_del();
                                switch(among_var) {
                                    case 0:
                                        cursor = limit - v_2;
                                        break lab1;
                                    case 1:
                                        // (, line 195
                                        // [, line 195
                                        ket = cursor;
                                        // literal, line 195
                                        if (!(eq_s_b(2, "at")))
                                        {
                                            cursor = limit - v_2;
                                            break lab1;
                                        }
                                        // ], line 195
                                        bra = cursor;
                                        // call R2, line 195
                                        if (!r_R2())
                                        {
                                            cursor = limit - v_2;
                                            break lab1;
                                        }
                                        // delete, line 195
                                        slice_del();
                                        break;
                                }
                            } while (false);
                            break;
                        case 7:
                            // (, line 203
                            // call R2, line 204
                            if (!r_R2())
                            {
                                return false;
                            }
                            // delete, line 204
                            slice_del();
                            // try, line 205
                            v_3 = limit - cursor;
                            lab2: do {
                                // (, line 205
                                // [, line 206
                                ket = cursor;
                                // substring, line 206
                                among_var = find_among_b(a_6, 3);
                                if (among_var == 0)
                                {
                                    cursor = limit - v_3;
                                    break lab2;
                                }
                                // ], line 206
                                bra = cursor;
                                switch(among_var) {
                                    case 0:
                                        cursor = limit - v_3;
                                        break lab2;
                                    case 1:
                                        // (, line 209
                                        // call R2, line 209
                                        if (!r_R2())
                                        {
                                            cursor = limit - v_3;
                                            break lab2;
                                        }
                                        // delete, line 209
                                        slice_del();
                                        break;
                                }
                            } while (false);
                            break;
                        case 8:
                            // (, line 215
                            // call R2, line 216
                            if (!r_R2())
                            {
                                return false;
                            }
                            // delete, line 216
                            slice_del();
                            // try, line 217
                            v_4 = limit - cursor;
                            lab3: do {
                                // (, line 217
                                // [, line 218
                                ket = cursor;
                                // substring, line 218
                                among_var = find_among_b(a_7, 3);
                                if (among_var == 0)
                                {
                                    cursor = limit - v_4;
                                    break lab3;
                                }
                                // ], line 218
                                bra = cursor;
                                switch(among_var) {
                                    case 0:
                                        cursor = limit - v_4;
                                        break lab3;
                                    case 1:
                                        // (, line 221
                                        // call R2, line 221
                                        if (!r_R2())
                                        {
                                            cursor = limit - v_4;
                                            break lab3;
                                        }
                                        // delete, line 221
                                        slice_del();
                                        break;
                                }
                            } while (false);
                            break;
                        case 9:
                            // (, line 227
                            // call R2, line 228
                            if (!r_R2())
                            {
                                return false;
                            }
                            // delete, line 228
                            slice_del();
                            // try, line 229
                            v_5 = limit - cursor;
                            lab4: do {
                                // (, line 229
                                // [, line 230
                                ket = cursor;
                                // literal, line 230
                                if (!(eq_s_b(2, "at")))
                                {
                                    cursor = limit - v_5;
                                    break lab4;
                                }
                                // ], line 230
                                bra = cursor;
                                // call R2, line 230
                                if (!r_R2())
                                {
                                    cursor = limit - v_5;
                                    break lab4;
                                }
                                // delete, line 230
                                slice_del();
                            } while (false);
                            break;
                    }
                    return true;
                }

                private boolean r_y_verb_suffix() {
            int among_var;
            int v_1;
            int v_2;
                    // (, line 236
                    // setlimit, line 237
                    v_1 = limit - cursor;
                    // tomark, line 237
                    if (cursor < I_pV)
                    {
                        return false;
                    }
                    cursor = I_pV;
                    v_2 = limit_backward;
                    limit_backward = cursor;
                    cursor = limit - v_1;
                    // (, line 237
                    // [, line 237
                    ket = cursor;
                    // substring, line 237
                    among_var = find_among_b(a_9, 12);
                    if (among_var == 0)
                    {
                        limit_backward = v_2;
                        return false;
                    }
                    // ], line 237
                    bra = cursor;
                    limit_backward = v_2;
                    switch(among_var) {
                        case 0:
                            return false;
                        case 1:
                            // (, line 240
                            // literal, line 240
                            if (!(eq_s_b(1, "u")))
                            {
                                return false;
                            }
                            // delete, line 240
                            slice_del();
                            break;
                    }
                    return true;
                }

                private boolean r_verb_suffix() {
            int among_var;
            int v_1;
            int v_2;
            int v_3;
            int v_4;
                    // (, line 244
                    // setlimit, line 245
                    v_1 = limit - cursor;
                    // tomark, line 245
                    if (cursor < I_pV)
                    {
                        return false;
                    }
                    cursor = I_pV;
                    v_2 = limit_backward;
                    limit_backward = cursor;
                    cursor = limit - v_1;
                    // (, line 245
                    // [, line 245
                    ket = cursor;
                    // substring, line 245
                    among_var = find_among_b(a_10, 96);
                    if (among_var == 0)
                    {
                        limit_backward = v_2;
                        return false;
                    }
                    // ], line 245
                    bra = cursor;
                    limit_backward = v_2;
                    switch(among_var) {
                        case 0:
                            return false;
                        case 1:
                            // (, line 248
                            // try, line 248
                            v_3 = limit - cursor;
                            lab0: do {
                                // (, line 248
                                // literal, line 248
                                if (!(eq_s_b(1, "u")))
                                {
                                    cursor = limit - v_3;
                                    break lab0;
                                }
                                // test, line 248
                                v_4 = limit - cursor;
                                // literal, line 248
                                if (!(eq_s_b(1, "g")))
                                {
                                    cursor = limit - v_3;
                                    break lab0;
                                }
                                cursor = limit - v_4;
                            } while (false);
                            // ], line 248
                            bra = cursor;
                            // delete, line 248
                            slice_del();
                            break;
                        case 2:
                            // (, line 269
                            // delete, line 269
                            slice_del();
                            break;
                    }
                    return true;
                }

                private boolean r_residual_suffix() {
            int among_var;
            int v_1;
            int v_2;
                    // (, line 273
                    // [, line 274
                    ket = cursor;
                    // substring, line 274
                    among_var = find_among_b(a_11, 8);
                    if (among_var == 0)
                    {
                        return false;
                    }
                    // ], line 274
                    bra = cursor;
                    switch(among_var) {
                        case 0:
                            return false;
                        case 1:
                            // (, line 277
                            // call RV, line 277
                            if (!r_RV())
                            {
                                return false;
                            }
                            // delete, line 277
                            slice_del();
                            break;
                        case 2:
                            // (, line 279
                            // call RV, line 279
                            if (!r_RV())
                            {
                                return false;
                            }
                            // delete, line 279
                            slice_del();
                            // try, line 279
                            v_1 = limit - cursor;
                            lab0: do {
                                // (, line 279
                                // [, line 279
                                ket = cursor;
                                // literal, line 279
                                if (!(eq_s_b(1, "u")))
                                {
                                    cursor = limit - v_1;
                                    break lab0;
                                }
                                // ], line 279
                                bra = cursor;
                                // test, line 279
                                v_2 = limit - cursor;
                                // literal, line 279
                                if (!(eq_s_b(1, "g")))
                                {
                                    cursor = limit - v_1;
                                    break lab0;
                                }
                                cursor = limit - v_2;
                                // call RV, line 279
                                if (!r_RV())
                                {
                                    cursor = limit - v_1;
                                    break lab0;
                                }
                                // delete, line 279
                                slice_del();
                            } while (false);
                            break;
                    }
                    return true;
                }

                public boolean stem() {
            int v_1;
            int v_2;
            int v_3;
            int v_4;
            int v_5;
            int v_6;
            int v_7;
            int v_8;
                    // (, line 284
                    // or, line 286
                    lab0: do {
                        v_1 = cursor;
                        lab1: do {
                            // call exception1, line 286
                            if (!r_exception1())
                            {
                                break lab1;
                            }
                            break lab0;
                        } while (false);
                        cursor = v_1;
                        // (, line 286
                        // do, line 287
                        v_2 = cursor;
                        lab2: do {
                            // call mark_regions, line 287
                            if (!r_mark_regions())
                            {
                                break lab2;
                            }
                        } while (false);
                        cursor = v_2;
                        // backwards, line 288
                        limit_backward = cursor; cursor = limit;
                        // (, line 288
                        // do, line 289
                        v_3 = limit - cursor;
                        lab3: do {
                            // call attached_pronoun, line 289
                            if (!r_attached_pronoun())
                            {
                                break lab3;
                            }
                        } while (false);
                        cursor = limit - v_3;
                        // do, line 290
                        v_4 = limit - cursor;
                        lab4: do {
                            // call stopwords, line 290
                            if (!r_stopwords())
                            {
                                break lab4;
                            }
                        } while (false);
                        cursor = limit - v_4;
                        // do, line 291
                        v_5 = limit - cursor;
                        lab5: do {
                            // (, line 291
                            // or, line 291
                            lab6: do {
                                v_6 = limit - cursor;
                                lab7: do {
                                    // call standard_suffix, line 291
                                    if (!r_standard_suffix())
                                    {
                                        break lab7;
                                    }
                                    break lab6;
                                } while (false);
                                cursor = limit - v_6;
                                lab8: do {
                                    // call y_verb_suffix, line 292
                                    if (!r_y_verb_suffix())
                                    {
                                        break lab8;
                                    }
                                    break lab6;
                                } while (false);
                                cursor = limit - v_6;
                                // call verb_suffix, line 293
                                if (!r_verb_suffix())
                                {
                                    break lab5;
                                }
                            } while (false);
                        } while (false);
                        cursor = limit - v_5;
                        // do, line 295
                        v_7 = limit - cursor;
                        lab9: do {
                            // call residual_suffix, line 295
                            if (!r_residual_suffix())
                            {
                                break lab9;
                            }
                        } while (false);
                        cursor = limit - v_7;
                        cursor = limit_backward;                    } while (false);
                    // do, line 298
                    v_8 = cursor;
                    lab10: do {
                        // call postlude, line 298
                        if (!r_postlude())
                        {
                            break lab10;
                        }
                    } while (false);
                    cursor = v_8;
                    return true;
                }

        public boolean equals( Object o ) {
            return o instanceof MySpaStemmer;
        }

        public int hashCode() {
            return MySpaStemmer.class.getName().hashCode();
        }



}

